################################################################################
# Parameters have to be specified by the caller, to customize the pipeline
# for a certain project
################################################################################
parameters:

  # Identifies each job uniquely when 'ci-job-template.yml' is used in a loop. 
  # Can only contain characters, numbers, and underscores.
  # Also used to extend names of files published in extensions.
- name: id
  type: string
  default: ''
  
  # Enables an easy integration with custom jobs. 
  # The parameter will be passed as is to the 'dependsOn' property of the job.
- name: dependsOn
  type: string
  default: ''

  # Enables an easy integration with custom jobs. 
  # The parameter will be passed as is to the 'condition' property of the job.
- name: condition
  type: string
  default: ''

  # Specifies the name of the agent pool.
  # The pool name cannot be hardcoded in the pipeline template.
- name: agentPool
  type: string
  default: ''

  # Specifies the maximum job execution time in minutes.
- name: jobTimeoutInMinutes
  type: number
  default: 300

  # Specifies whether future jobs should run even if this job fails.
- name: jobContinueOnError
  type: boolean
  default: false

  # Specifies the product
  # Each product requires an individual process.
- name: product
  type: string
  default: 
  values:
  - icm
  - pwa
  - iom
  - custom

  # Name of the environment.
- name: env
  type: string
  default: 

  # Name of the environments repository.
  # The name is given in "resources.repositories".
- name: environmentPath
  type: string
  default: environments

  # Name of the environments branch.
  # The branch name is given in "resources.repositories".
- name: environmentBranch
  type: string
  default: master

  # Name of the CI pipeline
  # The branch name is given in "resources.pipelines".
- name: triggerPipelineName
  type: string
  default:

  # Name of the CI pipeline artifact.
- name: pipelineArtifactName
  type: string
  default: image

  # Name of the file to be analysed.
- name: imagePropertiesFile
  type: string
  default: imageProperties.yaml

  # Path of version file to be overwritten in the environment repository.
  # For example: int/icm/version.yaml,int/icm-edit/version.yaml
- name: versionFilePath
  type: string
  default:

  # Specifies whether a PullRequest should be created.
- name: prCreatePullRequest
  type: boolean
  default: true

  # Delete the source branch after the pull request has been completed and merged into the target branch.
- name: prDeleteSourceBranch
  type: boolean
  default: true

  # Additional users or groups to include as reviewers on the new pull request. Space separated.
- name: prReviewers
  type: string
  default:

  # Squash the commits in the source branch when merging into the target branch.
- name: prSquash
  type: boolean
  default: true

  # Set the pull request to complete automatically when all policies have passed and the source branch can be merged into the target branch.
- name: prAutoComplete
  type: boolean
  default: true

  # Set the name of the commit and pull request author
- name: prAuthorName
  type: string
  default: "ISH-CD"

  # Set the mail of the commit and pull request author
- name: prAuthorMail
  type: string
  default: "intershop@intershop.com"

  # Decide whether to use a predefined registry or the registry value from the imagePropertiesFile.
- name: usePredefinedRegistry
  type: boolean
  default: false

  # Decide whether to use a predefined pullPolicy.
- name: usePredefinedPullPolicy
  type: boolean
  default: false

  # Predefined PullPolicy
- name: predefinedPullPolicy
  type: string
  default: IfNotPresent

  # Resource name of this template repository.
- name: templateRepository
  type: string
  default: cd-partner-devops

  # Regular expression pattern that the ImageTag must satisfy.
  # This pattern ensures that the ImageTag is a valid Docker image tag and 
  # can be used to process only Docker Tags with this particular pattern.
- name: imageTagPattern
  type: string
  default: '^[^\s][[:graph:]]*$'

#
# ICM specific parameter
#

# Predefined name of the project customizations
- name: icmPredefinedProjectCustomizationName
  type: string
  default: 'icm-as-customization-project-icm'

#
# PWA specific parameter
#

- name: pwaPredefinedSsrRegistry
  type: string
  default: ''

- name: pwaPredefinedNginxRegistry
  type: string
  default: ''

#
# Custom specific parameter
#
  # Determine which object to use from the imagePropertiesFile based on the type
- name: customSelectedImageType
  type: string
  default: ''

  # Specify the YAML yq path where the image name should be set
- name: customImageNameYamlPath
  type: string
  default: ''

  # Specify the YAML yq path where the image tag should be set
  # If this value is the same as customImageNameYamlPath, the following format will be used:
  # <customImageNameYamlPath> = <registry>/<imagename>:<tag>
- name: customTagYamlPath
  type: string
  default: ''

#
# Deployment
#

  # Decide whether to use a deployment job.
- name: useDeploymentJob
  type: boolean
  default: false

  # Name of the Deployment environment. This environment must exist in the Azure DevOps project.
- name: deploymentEnvironment
  type: string
  default: ''

#
# ManualValidation
#

  # Decide whether a manual validation should be carried out before the job.
- name: manualValidationEnabled
  type: boolean
  default: false

  # Decide whether a manual validation should be performed before the job, which is intended for a PRD environment. Should be enabled and is only applicable for ICM or IOM.
- name: manualValidationEnabledForPrd
  type: boolean
  default: false

  # Specify the maximum duration of the manual validation in minutes.
- name: manualValidationTimeout
  type: number
  default: 43200 # 30 days

  # Specify which users or groups should be informed about the upcoming manual validation.
- name: manualValidationNotifyUsers
  type: string
  default: ''

  # Specify the information text for the manual validation.
- name: manualValidationInfoText
  type: string
  default: 'Please confirm: No breaking DB changes that could require DB rollback.'


jobs:
  - ${{ if or(and(eq(parameters.manualValidationEnabledForPrd, true), startsWith(parameters.env, 'prd'), in(parameters.product, 'icm', 'iom')),eq(parameters.manualValidationEnabled, true)) }}:
    - job: waitForValidation_${{ parameters.product }}_${{ parameters.env }}${{ parameters.id }}
      displayName: ManualValidation for ${{ parameters.product }}_${{ parameters.env }}${{ parameters.id }}
      condition: ${{ parameters.condition }}
      pool: server
      timeoutInMinutes: ${{ parameters.manualValidationTimeout }}
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: ${{ parameters.manualValidationTimeout }}
        inputs:
          notifyUsers: ${{ parameters.manualValidationNotifyUsers }}
          instructions: '${{ parameters.manualValidationInfoText }} For ${{ parameters.product }}_${{ parameters.env }}${{ parameters.id }}'
          onTimeout: 'reject'
  - ${{ if or(eq(parameters.useDeploymentJob, false), eq(parameters.product, 'custom') ) }}:
    - job: CD_${{ parameters.product }}_${{ parameters.env }}${{ parameters.id }}
      displayName: CD_${{ parameters.product }}_${{ parameters.env }}${{ parameters.id }}
      pool: '${{ parameters.agentPool }}'
      dependsOn: 
        - ${{ if or(and(eq(parameters.manualValidationEnabledForPrd, true), startsWith(parameters.env, 'prd'), in(parameters.product, 'icm', 'iom')), eq(parameters.manualValidationEnabled, true)) }}:   
          - waitForValidation_${{ parameters.product }}_${{ parameters.env }}${{ parameters.id }}
        - ${{ if ne(parameters.dependsOn, '') }}:
          - ${{ parameters.dependsOn }}
      condition: ${{ parameters.condition }}
      continueOnError: ${{ parameters.jobContinueOnError }}
      timeoutInMinutes: ${{ parameters.jobTimeoutInMinutes }}
      workspace:
        clean: all
      variables:
        TEMP_ID: ${{ parameters.id }}
        TEMP_PRODUCT: ${{ parameters.product }}
        TEMP_ENV: ${{ parameters.env }}
        TEMP_ENVIRONMENT_PATH: ${{ parameters.environmentPath }}
        TEMP_ENVIRONMENT_BRANCH: ${{ parameters.environmentBranch }}
        TEMP_TRIGGER_PIPELINE_NAME: ${{ parameters.triggerPipelineName }}
        TEMP_PIPELINE_ARTIFACT_NAME: ${{ parameters.pipelineArtifactName }}
        TEMP_IMAGE_PROPERTIES_FILE: ${{ parameters.imagePropertiesFile }}
        TEMP_VERSION_FILE_PATH: ${{ parameters.versionFilePath }}
        TEMP_PR_CREATE_PULL_REQUEST: ${{ parameters.prCreatePullRequest }}
        TEMP_PR_DELETE_SOURCE_BRANCH: ${{ parameters.prDeleteSourceBranch }}
        TEMP_PR_REVIEWERS: ${{ parameters.prReviewers }}
        TEMP_PR_SQUASH: ${{ parameters.prSquash }}
        TEMP_PR_AUTO_COMPLETE: ${{ parameters.prAutoComplete }}
        TEMP_USE_PREDEFINED_REGISTRY: ${{ parameters.usePredefinedRegistry }}
        TEMP_USE_PREDEFINED_PULL_POLICY: ${{ parameters.usePredefinedPullPolicy }}
        TEMP_PREDEFINED_PULL_POLICY: ${{ parameters.predefinedPullPolicy }}
        TEMP_TEMPLATE_REPOSITORY: ${{ parameters.templateRepository }}
        TEMP_IMAGE_TAG_PATTERN: ${{ parameters.imageTagPattern }}
        TEMP_ICM_PREDEFINED_PROJECT_CUSTOMIZATION_NAME: ${{ parameters.icmPredefinedProjectCustomizationName }}
        TEMP_PWA_PREDEFINED_SSR_REGISTRY: ${{ parameters.pwaPredefinedSsrRegistry }}
        TEMP_PWA_PREDEFINED_NGINX_REGISTRY: ${{ parameters.pwaPredefinedNginxRegistry }}
        TEMP_CUSTOM_SELECTED_IMAGE_TYPE: ${{ parameters.customSelectedImageType }}
        TEMP_CUSTOM_IMAGE_NAME_YAML_PATH: ${{ parameters.customImageNameYamlPath }}
        TEMP_CUSTOM_TAG_YAML_PATH: ${{ parameters.customTagYamlPath }}
        TEMP_PR_AUTHOR_NAME: ${{ parameters.prAuthorName }}
        TEMP_PR_AUTHOR_EMAIL: ${{ parameters.prAuthorMail }}
        TEMP_IMAGE_ARTIFACT_FILE_PATH: $(Pipeline.Workspace)/$(TEMP_TRIGGER_PIPELINE_NAME)/$(TEMP_PIPELINE_ARTIFACT_NAME)/$(TEMP_IMAGE_PROPERTIES_FILE)
        TEMP_ENVIRONMENTS_DIRECTORY: $(Pipeline.Workspace)/s/$(TEMP_ENVIRONMENT_PATH)
        TEMP_TEMPLATE_DIRECTORY: $(Pipeline.Workspace)/s/$(TEMP_TEMPLATE_REPOSITORY)
        TEMP_MD_CONFIG_FILE: $(Pipeline.Workspace)/config_$(TEMP_PRODUCT)_$(TEMP_ENV)$(TEMP_ID).md
        TEMP_MD_PATCH_FILE: $(Pipeline.Workspace)/cd-patched-file_$(TEMP_PRODUCT)_$(TEMP_ENV)$(TEMP_ID).md
        TEMP_TRIGGER_PIPELINE_ID: $(resources.pipeline.${{ parameters.triggerPipelineName }}.pipelineID)
        TEMP_TRIGGER_PIPELINE_RUN_NAME: $(resources.pipeline.${{ parameters.triggerPipelineName }}.runName)
        TEMP_TRIGGER_PIPELINE_RUN_ID: $(resources.pipeline.${{ parameters.triggerPipelineName }}.runId)
        TEMP_TRIGGER_PIPELINE_RUN_URI: $(resources.pipeline.${{ parameters.triggerPipelineName }}.runURI)
        TEMP_TRIGGER_PIPELINE_SOURCE_BRANCH: $(resources.pipeline.${{ parameters.triggerPipelineName }}.sourceBranch)
        TEMP_TRIGGER_PIPELINE_SOURCE_COMMIT: $(resources.pipeline.${{ parameters.triggerPipelineName }}.sourceCommit)
      steps:
        - template: templates/process.yml
          parameters:
            versionFilePath: ${{ parameters.versionFilePath }}
            triggerPipelineName: ${{ parameters.triggerPipelineName }}
            environmentPath: ${{ parameters.environmentPath }}
            templateRepository: ${{ parameters.templateRepository }}

  - ${{ if eq(parameters.useDeploymentJob, true) }}:
    - deployment: CD_${{ parameters.product }}_${{ parameters.env }}${{ parameters.id }}
      displayName: CD_${{ parameters.product }}_${{ parameters.env }}${{ parameters.id }}
      pool: '${{ parameters.agentPool }}'
      dependsOn: 
        - ${{ if or(and(eq(parameters.manualValidationEnabledForPrd, true), startsWith(parameters.env, 'prd'), in(parameters.product, 'icm', 'iom')), eq(parameters.manualValidationEnabled, true)) }}:   
          - waitForValidation_${{ parameters.product }}_${{ parameters.env }}${{ parameters.id }}
        - ${{ if ne(parameters.dependsOn, '') }}:
          - ${{ parameters.dependsOn }}
      condition: ${{ parameters.condition }}
      continueOnError: ${{ parameters.jobContinueOnError }}
      timeoutInMinutes: ${{ parameters.jobTimeoutInMinutes }}
      workspace:
        clean: all
      ${{ if eq(parameters.deploymentEnvironment, '') }}:
          environment: ${{ parameters.product }}_${{ parameters.env }}
      ${{ else }}:
          environment: ${{ parameters.deploymentEnvironment }}
      variables:
        TEMP_ID: ${{ parameters.id }}
        TEMP_PRODUCT: ${{ parameters.product }}
        TEMP_ENV: ${{ parameters.env }}
        TEMP_ENVIRONMENT_PATH: ${{ parameters.environmentPath }}
        TEMP_ENVIRONMENT_BRANCH: ${{ parameters.environmentBranch }}
        TEMP_TRIGGER_PIPELINE_NAME: ${{ parameters.triggerPipelineName }}
        TEMP_PIPELINE_ARTIFACT_NAME: ${{ parameters.pipelineArtifactName }}
        TEMP_IMAGE_PROPERTIES_FILE: ${{ parameters.imagePropertiesFile }}
        TEMP_VERSION_FILE_PATH: ${{ parameters.versionFilePath }}
        TEMP_PR_CREATE_PULL_REQUEST: ${{ parameters.prCreatePullRequest }}
        TEMP_PR_DELETE_SOURCE_BRANCH: ${{ parameters.prDeleteSourceBranch }}
        TEMP_PR_REVIEWERS: ${{ parameters.prReviewers }}
        TEMP_PR_SQUASH: ${{ parameters.prSquash }}
        TEMP_PR_AUTO_COMPLETE: ${{ parameters.prAutoComplete }}
        TEMP_USE_PREDEFINED_REGISTRY: ${{ parameters.usePredefinedRegistry }}
        TEMP_USE_PREDEFINED_PULL_POLICY: ${{ parameters.usePredefinedPullPolicy }}
        TEMP_PREDEFINED_PULL_POLICY: ${{ parameters.predefinedPullPolicy }}
        TEMP_TEMPLATE_REPOSITORY: ${{ parameters.templateRepository }}
        TEMP_IMAGE_TAG_PATTERN: ${{ parameters.imageTagPattern }}
        TEMP_ICM_PREDEFINED_PROJECT_CUSTOMIZATION_NAME: ${{ parameters.icmPredefinedProjectCustomizationName }}
        TEMP_PWA_PREDEFINED_SSR_REGISTRY: ${{ parameters.pwaPredefinedSsrRegistry }}
        TEMP_PWA_PREDEFINED_NGINX_REGISTRY: ${{ parameters.pwaPredefinedNginxRegistry }}
        TEMP_CUSTOM_SELECTED_IMAGE_TYPE: ${{ parameters.customSelectedImageType }}
        TEMP_CUSTOM_IMAGE_NAME_YAML_PATH: ${{ parameters.customImageNameYamlPath }}
        TEMP_CUSTOM_TAG_YAML_PATH: ${{ parameters.customTagYamlPath }}
        TEMP_PR_AUTHOR_NAME: ${{ parameters.prAuthorName }}
        TEMP_PR_AUTHOR_EMAIL: ${{ parameters.prAuthorMail }}
        TEMP_IMAGE_ARTIFACT_FILE_PATH: $(Pipeline.Workspace)/$(TEMP_TRIGGER_PIPELINE_NAME)/$(TEMP_PIPELINE_ARTIFACT_NAME)/$(TEMP_IMAGE_PROPERTIES_FILE)
        TEMP_ENVIRONMENTS_DIRECTORY: $(Pipeline.Workspace)/s/$(TEMP_ENVIRONMENT_PATH)
        TEMP_TEMPLATE_DIRECTORY: $(Pipeline.Workspace)/s/$(TEMP_TEMPLATE_REPOSITORY)
        TEMP_MD_CONFIG_FILE: $(Pipeline.Workspace)/config_$(TEMP_PRODUCT)_$(TEMP_ENV)$(TEMP_ID).md
        TEMP_MD_PATCH_FILE: $(Pipeline.Workspace)/cd-patched-file_$(TEMP_PRODUCT)_$(TEMP_ENV)$(TEMP_ID).md
        TEMP_TRIGGER_PIPELINE_ID: $(resources.pipeline.${{ parameters.triggerPipelineName }}.pipelineID)
        TEMP_TRIGGER_PIPELINE_RUN_NAME: $(resources.pipeline.${{ parameters.triggerPipelineName }}.runName)
        TEMP_TRIGGER_PIPELINE_RUN_ID: $(resources.pipeline.${{ parameters.triggerPipelineName }}.runId)
        TEMP_TRIGGER_PIPELINE_RUN_URI: $(resources.pipeline.${{ parameters.triggerPipelineName }}.runURI)
        TEMP_TRIGGER_PIPELINE_SOURCE_BRANCH: $(resources.pipeline.${{ parameters.triggerPipelineName }}.sourceBranch)
        TEMP_TRIGGER_PIPELINE_SOURCE_COMMIT: $(resources.pipeline.${{ parameters.triggerPipelineName }}.sourceCommit)
        TEMP_USE_DEPLOYMENT_JOB: ${{ parameters.useDeploymentJob }}
        ${{ if eq(parameters.deploymentEnvironment, '') }}:
          TEMP_DEPLOYMENT_ENVIRONMENT: ${{ parameters.product }}_${{ parameters.env }}
        ${{ else }}:
          TEMP_DEPLOYMENT_ENVIRONMENT: ${{ parameters.deploymentEnvironment }}
      strategy:
        runOnce:    #rolling, canary are the other strategies that are supported
          deploy:
            steps:
              - template: templates/process.yml
                parameters:
                  versionFilePath: ${{ parameters.versionFilePath }}
                  triggerPipelineName: ${{ parameters.triggerPipelineName }}
                  environmentPath: ${{ parameters.environmentPath }}
                  templateRepository: ${{ parameters.templateRepository }}
